## Create DATABASE db1;
----------------------------------
## USE db1;
----------------------------------
# CREATE TABLE table name(
column1 VARCHAR(10) NOT NULL,
column2 INT,
column3 VARCHAR(10),
PRIMARY KEY(column1),
FORIEGN KEY(column name) REFERENCES tablename(column name) 


);

--------------------------------------


## update record

update student
SET place = 'kochi' WHERE student_id='s1';
---------------------------------------
## create copy of table

CREATE TABLE student1 LIKE student;
INSERT student1 SELECT * FROM student;
---------------------------------------
## delete records
DELETE FROM student1
WHERE student_id = 's2';
----------------------------------------
## select command -- to get data from table

SELECT * FROM student1;

SELECT student_id, place,age FROM student1;
------------------------------------------------
## Data filtering
SELECT * FROM student WHERE place = 'kozhikode';
SELECT * FROM student WHERE age <20 ;
-------------------------------------------------
## DISTINCT CLAUSE
SELECT DISTINCT place FROM student;
------------------------------------------------
## Orderby clause == sorting

SELECT * FROM student ORDER BY student_name ASC ;
SELECT * FROM student ORDER BY student_name DESC ;

-----------------------------------------------
## Add or modify columns

ALTER TABLE student1
ADD contact INT(10) NOT NULL;

# changing datatypes of column
MODIFY contact VARCHAR(10) NULL;
------------------------------------------------
## Rename or delete columns


ALTER TABLE student1
RENAME COLUMN contact TO student_contact;


ALTER TABLE student1
DROP COLUMN student_contact;
-------------------------------------------------
### Delete all records --- truncate vs drop

truncate ---deletes all records of column
drop table ---  deletes the whole table 

---------------------------------------------------
### First and Last record -- using orderby and limit

SELECT * FROM student ORDER BY student_id LIMIT 1;
SELECT * FROM student ORDER BY student_id DESC LIMIT 1;

----------------------------------------------------------
## Random record selection
SELECT * FROM student ORDER BY rand() LIMIT 1;
------------------------------------------------------------
## Select As statement -- temporary change of column name.(alias)

SELECT student_name AS 'first_name',age AS student_age FROM student;


----------------------------------------------------------------

#### Arithmetic operators

SELECT 20 + 30 AS result;

## comparison -- = , <> --not equal to
SELECT 10=10 AS result;
SELECT 10<>20 AS result;
SELECT * FROM student WHERE place<>'kochi';


### Logical operators
AND ,OR 
BETWEEN
SELECT * FROM student WHERE age BETWEEN 20 AND 30;
-----------------------------------------------------------------
## EXISTS

---to add a subquery.
SELECT * FROM student WHERE EXISTS(SELECT age FROM student WHERE AGE>20);

## IN 

SELECT * FROM student
WHERE place IN ('malappuram','kochi');

## LIKE --similar record
 
SELECT * FROM student WHERE student_name LIKE 'a%'; --starting with a
SELECT * FROM student WHERE place LIKE 'kochi';
SELECT * FROM student WHERE student_name LIKE '%l'; -- ending in l

## NOT LIKE
SELECT * FROM student WHERE place NOT LIKE '%ott%';


#################################################################

## SQL built in functions
# string functions
* char_length -- length of string
SELECT place, char_length(place) AS length FROM student;

* concat -- join strings
SELECT concat(student_name, ' ' ,place) AS new_string FROM student;

* format --
SELECT format(25045.54547878,3) as new_number;
* insert
SELECT insert ('Google',1,3,'fff');
* upper
SELECT insert ('Google',1,3,'fff');SELECT upper('hello world') AS new_string;

*lower
*reverse -- string reversing
*repeat
SELECT repeat('HEllo world',5) AS new_string;

* left -- 2 characters from left
SELECT left('Hello',2) AS new_string;

*right
*length

#############
MATH FUNCTIONS
*abs
*avg
SELECT avg(age) as avg_age FROM student;

*ceiling --next higher integer
* floor --lowest no

*round
*round(25.848,2)
*count
SELECT count(student_id) as count FROM student;
*max
*min
*pi()
*rand -- random number 0-1

SELECT floor(rand()*11) as random_number;

*sqrt
*sum

########
DATE FUNCTIONS
*current_timestamp
SELECT current_timestamp() as timestamp1;

*day(date)
*month
*year
*dayname
SELECT dayname('2023/06/08') as new_day_name;
*sysdate -- database date
*curdate
*curtime
*now -- current date and time


######################################################

foreign key is a field in one table that refers to the Primary key in another table

CREATE TABLE enrollment(
enrollment_id VARCHAR(100) NOT NULL,
student_id VARCHAR(10),
course_id VARCHAR(10),
PRIMARY KEY(enrollment_id),
FOREIGN KEY(student_id) REFERENCES student(student_id),
FOREIGN KEY(course_id) REFERENCES courses(course_id)

);

###########################
SQL Joins

innerjoin ---common records
left outer join
right outer  join
full outer join -- all records

#####################
INNER JOIN

SELECT * FROM country INNER JOIN capital 
ON country.country_code = capital.country_code;

##################
LEFT JOIN


SELECT * FROM country
LEFT JOIN capital 
ON country.country_code=capital.country_code;

############### 
My sql does not have full join
we can use union to join left and right joins to get full joins


SELECT * FROM country
LEFT JOIN capital 
ON country.country_code=capital.country_code
UNION
SELECT * FROM country
RIGHT JOIN capital 
ON country.country_code=capital.country_code;


####################
IF function --condition check

SELECT if(10>20,'value1','value2') AS result;


SELECT student_name,age
if(age>=18,'adult','minor') AS student_type
FROM student ;

######################
IFNULL
SELECT ifnull(null,'HELLO') as result;

SELECT country.country_name, 
ifnull(capital.capital_name,'not defined') AS capitals
FROM country LEFT JOIN capital 
ON country.country_code = capital.country_code;

########################
ISNULL -- null =1,others =0

##########################
CASE function

SELECT country_name,
CASE
    WHEN country_name = 'India' THEN 'Hindi'
    WHEN country_name = 'Pakisthan' THEN 'Urdu'
    WHEN country_name = 'Nepal' THEN 'Nepali'
    WHEN country_name = 'Sri Lanka' THEN 'Sinhala'
    ELSE 'Bengali'
END AS official_lang
FROM country;



